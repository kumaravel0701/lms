O:8:"stdClass":27:{s:2:"id";s:4:"1659";s:8:"category";s:3:"306";s:6:"parent";s:1:"0";s:4:"name";s:6:"Q12-14";s:12:"questiontext";s:95:"<p>Design the code to check the equivalence of two linked list. <strong>[LinkedIn]</strong></p>";s:18:"questiontextformat";s:1:"1";s:15:"generalfeedback";s:0:"";s:21:"generalfeedbackformat";s:1:"1";s:11:"defaultmark";d:1;s:7:"penalty";d:0;s:5:"qtype";s:10:"coderunner";s:6:"length";s:1:"1";s:5:"stamp";s:37:"lms.velandev.life+250824050413+GkHyey";s:11:"timecreated";s:10:"1756011853";s:12:"timemodified";s:10:"1756011853";s:9:"createdby";s:1:"2";s:10:"modifiedby";s:1:"2";s:8:"idnumber";N;s:9:"contextid";s:3:"455";s:6:"status";s:5:"ready";s:9:"versionid";s:4:"1659";s:7:"version";s:1:"1";s:19:"questionbankentryid";s:4:"1645";s:14:"categoryobject";O:8:"stdClass":9:{s:2:"id";s:3:"306";s:4:"name";s:23:"M1-D2- Coding Challenge";s:9:"contextid";s:3:"455";s:4:"info";s:0:"";s:10:"infoformat";s:1:"0";s:5:"stamp";s:37:"lms.velandev.life+250824050413+VmNtaG";s:6:"parent";s:3:"304";s:9:"sortorder";s:3:"999";s:8:"idnumber";N;}s:7:"options";O:8:"stdClass":46:{s:14:"coderunnertype";s:6:"nodejs";s:13:"prototypetype";s:1:"0";s:12:"allornothing";s:1:"1";s:13:"penaltyregime";s:1:"0";s:8:"precheck";s:1:"0";s:9:"hidecheck";s:1:"0";s:10:"showsource";s:1:"0";s:14:"answerboxlines";s:2:"18";s:16:"answerboxcolumns";s:3:"100";s:13:"answerpreload";s:1915:"class node {
    constructor(value) {
        this.value = value
        this.next = null
    }
}
class LinkedList {
    constructor() {
        this.head = null
    }
    // Add a node to the end of the list
    createlinkedlist(arr){
        for(let val of arr){
            let new_node = new node(val)
            if(this.head==null)
                this.head=new_node
            else{
                let temp = this.head
                while(temp.next!=null)
                    temp=temp.next
                temp.next=new_node
            }
        }
    }
    // Finding the length of the linked list
    getLength(){
        let len=0
        let temp = this.head
        while(temp!=null){
            len++
            temp=temp.next
        }  
        return len
    }
    // Print the list
    printList() {
        let current = this.head
        while (current !== null) {
            process.stdout.write(current.value.toString()+" -> ")
            //console.log(current.value)
            current = current.next
        }
        console.log(null)
        return 
    }
}
//Function to check two lists are equal or not
function areListsEqual(list1, list2) {
    /* Type your code here */
}

// Driver Code

const list1 = new LinkedList()
const list2 = new LinkedList()

const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  });
  readline.question('',l1 =>{
    readline.question('',l2 =>{
        list1.createlinkedlist(l1.split(','))
        list2.createlinkedlist(l2.split(','))
        console.log("List 1:")
        list1.printList()
        console.log("List 2:")
        list2.printList()
        process.stdout.write("Both lists are ")
        areListsEqual(list1,list2) ? console.log("Equal") : console.log("Different")
    readline.close()
    });
  });
";s:11:"globalextra";s:0:"";s:6:"useace";s:1:"1";s:13:"resultcolumns";N;s:8:"template";s:179:"{{ STUDENT_ANSWER }}

var SEPARATOR = "#<ab@17943918#@>#";

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
console.log(SEPARATOR);
{% endif %}
{% endfor %}";s:20:"iscombinatortemplate";s:1:"1";s:19:"allowmultiplestdins";s:1:"0";s:6:"answer";s:2281:"class node {
    constructor(value) {
        this.value = value
        this.next = null
    }
}
class LinkedList {
    constructor() {
        this.head = null
    }
    // Add a node to the end of the list
    createlinkedlist(arr){
        for(let val of arr){
            let new_node = new node(val)
            if(this.head==null)
                this.head=new_node
            else{
                let temp = this.head
                while(temp.next!=null)
                    temp=temp.next
                temp.next=new_node
            }
        }
    }
    // Finding the length of the linked list
    getLength(){
        let len=0;
        let temp = this.head
        while(temp!=null){
            len++
            temp=temp.next
        }  
        return len
    }
    // Print the list
    printList() {
        let current = this.head
        while (current !== null) {
            process.stdout.write(current.value.toString()+" -> ")
            //console.log(current.value)
            current = current.next
        }
        console.log(null)
        return 
    }
}
//Function to check two lists are equal or not
function areListsEqual(list1, list2) {
    let len1 = list1.getLength()
    let len2 = list2.getLength()
    if(len1!=len2){
        return false
    }
    let current1 = list1.head;
    let current2 = list2.head;
    while (current1 && current2) {
        if (current1.value !== current2.value) {
            return false;
        }
        current1 = current1.next;
        current2 = current2.next;
    }
    return true
}

// Driver Code
const list1 = new LinkedList()
const list2 = new LinkedList()

const readline = require('readline').createInterface({
    input: process.stdin,
    output: process.stdout
  });
  readline.question('',l1 =>{
    readline.question('',l2 =>{
        list1.createlinkedlist(l1.split(','))
        list2.createlinkedlist(l2.split(','))
        console.log("List 1:")
        list1.printList()
        console.log("List 2:")
        list2.printList()
        process.stdout.write("Both lists are ")
        areListsEqual(list1,list2) ? console.log("Equal") : console.log("Different")
    readline.close()
    });
  });";s:14:"validateonsave";s:1:"1";s:14:"testsplitterre";s:23:"|#<ab@17943918#@>#\n|ms";s:8:"language";s:6:"nodejs";s:7:"acelang";N;s:7:"sandbox";N;s:6:"grader";s:14:"EqualityGrader";s:16:"cputimelimitsecs";N;s:10:"memlimitmb";s:4:"1000";s:13:"sandboxparams";s:35:"{"sourcefilename": "__tester__.js"}";s:14:"templateparams";s:0:"";s:19:"hoisttemplateparams";s:1:"1";s:19:"extractcodefromjson";s:1:"1";s:18:"templateparamslang";s:4:"None";s:24:"templateparamsevalpertry";s:1:"0";s:19:"templateparamsevald";s:2:"{}";s:7:"twigall";s:1:"0";s:8:"uiplugin";s:3:"ace";s:12:"uiparameters";s:0:"";s:11:"attachments";s:1:"0";s:19:"attachmentsrequired";s:1:"0";s:11:"maxfilesize";s:5:"10240";s:14:"filenamesregex";s:0:"";s:16:"filenamesexplain";s:0:"";s:15:"displayfeedback";s:1:"1";s:13:"giveupallowed";s:1:"0";s:14:"prototypeextra";N;s:7:"answers";a:0:{}s:9:"customise";b:0;s:9:"testcases";a:5:{i:0;O:8:"stdClass":11:{s:2:"id";s:3:"488";s:10:"questionid";s:4:"1659";s:8:"testtype";s:1:"0";s:8:"testcode";s:0:"";s:5:"stdin";s:23:"15,20,25,30
15,20,25,30";s:8:"expected";s:95:"List 1:
15 -> 20 -> 25 -> 30 -> null
List 2:
15 -> 20 -> 25 -> 30 -> null
Both lists are Equal
";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"1";s:7:"display";s:4:"SHOW";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}i:1;O:8:"stdClass":11:{s:2:"id";s:3:"489";s:10:"questionid";s:4:"1659";s:8:"testtype";s:1:"0";s:8:"testcode";s:0:"";s:5:"stdin";s:11:"4,5,6
7,8,9";s:8:"expected";s:80:"List 1:
4 -> 5 -> 6 -> null
List 2:
7 -> 8 -> 9 -> null
Both lists are Different";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"0";s:7:"display";s:4:"SHOW";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}i:2;O:8:"stdClass":11:{s:2:"id";s:3:"490";s:10:"questionid";s:4:"1659";s:8:"testtype";s:1:"0";s:8:"testcode";s:0:"";s:5:"stdin";s:39:"apple,banana,cherry
apple,banana,cherry";s:8:"expected";s:104:"List 1:
apple -> banana -> cherry -> null
List 2:
apple -> banana -> cherry -> null
Both lists are Equal";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"0";s:7:"display";s:4:"SHOW";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}i:3;O:8:"stdClass":11:{s:2:"id";s:3:"491";s:10:"questionid";s:4:"1659";s:8:"testtype";s:1:"0";s:8:"testcode";s:0:"";s:5:"stdin";s:27:"cat,dog,fish
cat,horse,fish";s:8:"expected";s:97:"List 1:
cat -> dog -> fish -> null
List 2:
cat -> horse -> fish -> null
Both lists are Different
";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"0";s:7:"display";s:4:"HIDE";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}i:4;O:8:"stdClass":11:{s:2:"id";s:3:"492";s:10:"questionid";s:4:"1659";s:8:"testtype";s:1:"0";s:8:"testcode";s:0:"";s:5:"stdin";s:27:"0,1,1,2,3,5,8
0,1,1,2,3,5,8";s:8:"expected";s:116:"List 1:
0 -> 1 -> 1 -> 2 -> 3 -> 5 -> 8 -> null
List 2:
0 -> 1 -> 1 -> 2 -> 3 -> 5 -> 8 -> null
Both lists are Equal";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"0";s:7:"display";s:4:"HIDE";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}}}s:5:"hints";a:0:{}s:9:"prototype";O:25:"qtype_coderunner_question":86:{s:2:"id";s:4:"2785";s:8:"category";s:1:"2";s:9:"contextid";s:1:"1";s:6:"parent";s:1:"0";s:5:"qtype";O:16:"qtype_coderunner":1:{s:14:" * fileoptions";a:3:{s:7:"subdirs";b:1;s:8:"maxfiles";i:-1;s:8:"maxbytes";i:0;}}s:4:"name";s:24:"BUILTIN_PROTOTYPE_nodejs";s:12:"questiontext";s:536:"<p>A JavaScript question type, run using nodejs. The
test program to be executed starts with the student answer. That is followed
by each of the test case codes in turn, with a separator string being printed
between them. However, if there is any standard input present for any of the
test cases, a separate test run will be done for each test case.</p><p>
If there is a risk of side-effects from a test case affecting later test cases
you can add standard input to any one of the test cases to force the one-run-per-test-case
mode.</p>";s:18:"questiontextformat";s:1:"1";s:15:"generalfeedback";s:0:"";s:21:"generalfeedbackformat";s:1:"1";s:11:"defaultmark";d:1;s:6:"length";s:1:"1";s:7:"penalty";d:0;s:5:"stamp";s:37:"lms.velandev.life+250922115904+0z8ofh";s:8:"idnumber";N;s:11:"timecreated";s:10:"1758542344";s:12:"timemodified";s:10:"1758542344";s:9:"createdby";s:1:"2";s:10:"modifiedby";s:1:"2";s:5:"hints";a:0:{}s:6:"status";s:5:"ready";s:9:"versionid";s:4:"2785";s:7:"version";s:1:"1";s:19:"questionbankentryid";s:4:"2771";s:16:" * latestversion";N;s:12:"customfields";a:0:{}s:14:"shownumcorrect";b:0;s:9:"testcases";a:0:{}s:14:"coderunnertype";s:6:"nodejs";s:13:"prototypetype";s:1:"1";s:12:"allornothing";s:1:"1";s:13:"penaltyregime";s:15:"33.3, 66.7, ...";s:8:"precheck";s:1:"0";s:9:"hidecheck";s:1:"0";s:10:"showsource";s:1:"0";s:14:"answerboxlines";s:2:"18";s:13:"answerpreload";s:0:"";s:11:"globalextra";s:0:"";s:6:"useace";s:1:"1";s:13:"resultcolumns";N;s:8:"template";s:179:"{{ STUDENT_ANSWER }}

var SEPARATOR = "#<ab@17943918#@>#";

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
console.log(SEPARATOR);
{% endif %}
{% endfor %}";s:20:"iscombinatortemplate";s:1:"1";s:19:"allowmultiplestdins";s:1:"0";s:6:"answer";s:0:"";s:14:"validateonsave";s:1:"0";s:14:"testsplitterre";s:23:"|#<ab@17943918#@>#\n|ms";s:8:"language";s:6:"nodejs";s:7:"acelang";N;s:7:"sandbox";N;s:6:"grader";s:14:"EqualityGrader";s:16:"cputimelimitsecs";N;s:10:"memlimitmb";s:4:"1000";s:13:"sandboxparams";s:35:"{"sourcefilename": "__tester__.js"}";s:14:"templateparams";s:0:"";s:19:"hoisttemplateparams";s:1:"0";s:19:"extractcodefromjson";s:1:"1";s:18:"templateparamslang";s:4:"twig";s:24:"templateparamsevalpertry";s:1:"0";s:19:"templateparamsevald";s:0:"";s:7:"twigall";s:1:"0";s:8:"uiplugin";s:3:"ace";s:12:"uiparameters";s:0:"";s:11:"attachments";s:1:"0";s:19:"attachmentsrequired";s:1:"0";s:11:"maxfilesize";s:1:"0";s:14:"filenamesregex";s:0:"";s:16:"filenamesexplain";s:0:"";s:15:"displayfeedback";s:1:"0";s:13:"giveupallowed";s:1:"0";s:14:"prototypeextra";N;s:7:"answers";a:0:{}s:9:"customise";b:1;s:7:"student";N;s:9:"prototype";N;s:26:"initialisationerrormessage";N;s:16:"cachedfuncparams";N;s:25:"cachedevaldtemplateparams";N;s:18:"mergeduiparameters";N;s:18:"templateparamsjson";N;s:10:"parameters";N;s:8:"stepinfo";N;s:7:"options";N;s:5:"isnew";N;s:7:"context";N;s:10:"questionid";N;s:16:"answerboxcolumns";s:3:"100";}}