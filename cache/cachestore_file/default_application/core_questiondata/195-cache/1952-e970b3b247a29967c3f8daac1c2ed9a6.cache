O:8:"stdClass":27:{s:2:"id";s:4:"1952";s:8:"category";s:3:"326";s:6:"parent";s:1:"0";s:4:"name";s:6:"Q51-17";s:12:"questiontext";s:595:"<p>You are given a network of <code>N</code> nodes, labeled from <code>1</code> to <code>N</code>. You are also given <code>times</code>, a list of travel times as directed edges <code>times[i] = (u, v, w)</code>, where <code>u</code> is the source node, <code>v</code> is the target node, and <code>w</code> is the time it takes for a signal to travel from source to target. Find the time it takes for all nodes to receive the signal sent from a given starting node <code>K</code>. If it's impossible for all nodes to receive the signal, return <code>-1</code>.Â <strong>[Facebook]</strong></p>";s:18:"questiontextformat";s:1:"1";s:15:"generalfeedback";s:0:"";s:21:"generalfeedbackformat";s:1:"1";s:11:"defaultmark";d:1;s:7:"penalty";d:0;s:5:"qtype";s:10:"coderunner";s:6:"length";s:1:"1";s:5:"stamp";s:37:"lms.velandev.life+250824050414+PvrRwP";s:11:"timecreated";s:10:"1756011854";s:12:"timemodified";s:10:"1756011854";s:9:"createdby";s:1:"2";s:10:"modifiedby";s:1:"2";s:8:"idnumber";N;s:9:"contextid";s:3:"455";s:6:"status";s:5:"ready";s:9:"versionid";s:4:"1952";s:7:"version";s:1:"1";s:19:"questionbankentryid";s:4:"1938";s:14:"categoryobject";O:8:"stdClass":9:{s:2:"id";s:3:"326";s:4:"name";s:23:"M5-D1- Coding Challenge";s:9:"contextid";s:3:"455";s:4:"info";s:0:"";s:10:"infoformat";s:1:"0";s:5:"stamp";s:37:"lms.velandev.life+250824050414+WQ68Dr";s:6:"parent";s:3:"324";s:9:"sortorder";s:3:"999";s:8:"idnumber";N;}s:7:"options";O:8:"stdClass":46:{s:14:"coderunnertype";s:6:"nodejs";s:13:"prototypetype";s:1:"0";s:12:"allornothing";s:1:"1";s:13:"penaltyregime";s:1:"0";s:8:"precheck";s:1:"0";s:9:"hidecheck";s:1:"0";s:10:"showsource";s:1:"0";s:14:"answerboxlines";s:2:"18";s:16:"answerboxcolumns";s:3:"100";s:13:"answerpreload";s:1021:"function networkDelayTime(times, N, K) {
    const graph = {};
    for (let i = 1; i <= N; i++) {
        graph[i] = {};
    }
    for (const [u, v, w] of times) {
        graph[u][v] = w;
    }

    const distances = Array(N + 1).fill(Infinity);
    distances[K] = 0;

    class PriorityQueue {
        constructor() {
            this.items = [];
        }

        enqueue(element, priority) {
            /* Type ypur code here */
        }

        dequeue() {
            if (this.isEmpty()) {
                throw new Error('Queue is empty');
            }
            return this.items.shift().element;
        }

        isEmpty() {
            return this.items.length === 0;
        }
    }

    const priorityQueue = new PriorityQueue();
    priorityQueue.enqueue(K, 0);

    while (!priorityQueue.isEmpty()) {
        /* Type your code here */
    }

    const maxDistance = Math.max(...distances.slice(1));
    return maxDistance === Infinity ? -1 : maxDistance;
}";s:11:"globalextra";s:0:"";s:6:"useace";s:1:"1";s:13:"resultcolumns";N;s:8:"template";s:188:"{{ STUDENT_ANSWER }}

var SEPARATOR = "#<ab@17943918#@>#";

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
console.log(SEPARATOR);
{% endif %}
{% endfor %}";s:20:"iscombinatortemplate";s:1:"1";s:19:"allowmultiplestdins";s:1:"0";s:6:"answer";s:2042:"function networkDelayTime(times, N, K) {
    const graph = {};
    for (let i = 1; i <= N; i++) {
        graph[i] = {};
    }
    for (const [u, v, w] of times) {
        graph[u][v] = w;
    }

    const distances = Array(N + 1).fill(Infinity);
    distances[K] = 0;

    class PriorityQueue {
        constructor() {
            this.items = [];
        }

        enqueue(element, priority) {
            const queueElement = { element, priority };
            if (this.isEmpty()) {
                this.items.push(queueElement);
            } else {
                let added = false;
                for (let i = 0; i < this.items.length; i++) {
                    if (queueElement.priority < this.items[i].priority) {
                        this.items.splice(i, 0, queueElement);
                        added = true;
                        break;
                    }
                }
                if (!added) {
                    this.items.push(queueElement);
                }
            }
        }

        dequeue() {
            if (this.isEmpty()) {
                throw new Error('Queue is empty');
            }
            return this.items.shift().element;
        }

        isEmpty() {
            return this.items.length === 0;
        }
    }

    const priorityQueue = new PriorityQueue();
    priorityQueue.enqueue(K, 0);

    while (!priorityQueue.isEmpty()) {
        const currentNode = priorityQueue.dequeue();
        const currentDistance = distances[currentNode];

        for (const neighbor in graph[currentNode]) {
            const weight = graph[currentNode][neighbor];
            const newDist = currentDistance + weight;

            if (newDist < distances[neighbor]) {
                distances[neighbor] = newDist;
                priorityQueue.enqueue(neighbor, newDist);
            }
        }
    }

    const maxDistance = Math.max(...distances.slice(1));
    return maxDistance === Infinity ? -1 : maxDistance;
}";s:14:"validateonsave";s:1:"1";s:14:"testsplitterre";s:23:"|#<ab@17943918#@>#\n|ms";s:8:"language";s:6:"nodejs";s:7:"acelang";N;s:7:"sandbox";N;s:6:"grader";s:14:"EqualityGrader";s:16:"cputimelimitsecs";N;s:10:"memlimitmb";s:4:"1000";s:13:"sandboxparams";s:35:"{"sourcefilename": "__tester__.js"}";s:14:"templateparams";s:0:"";s:19:"hoisttemplateparams";s:1:"1";s:19:"extractcodefromjson";s:1:"1";s:18:"templateparamslang";s:4:"None";s:24:"templateparamsevalpertry";s:1:"0";s:19:"templateparamsevald";s:2:"{}";s:7:"twigall";s:1:"0";s:8:"uiplugin";s:3:"ace";s:12:"uiparameters";s:0:"";s:11:"attachments";s:1:"0";s:19:"attachmentsrequired";s:1:"0";s:11:"maxfilesize";s:5:"10240";s:14:"filenamesregex";s:0:"";s:16:"filenamesexplain";s:0:"";s:15:"displayfeedback";s:1:"1";s:13:"giveupallowed";s:1:"0";s:14:"prototypeextra";N;s:7:"answers";a:0:{}s:9:"customise";b:1;s:9:"testcases";a:5:{i:0;O:8:"stdClass":11:{s:2:"id";s:4:"1184";s:10:"questionid";s:4:"1952";s:8:"testtype";s:1:"0";s:8:"testcode";s:212:"const times = [[2, 1, 1], 
               [2, 3, 1], 
               [3, 4, 1]];
const N = 4;
const K = 2;
console.log(`Time taken from the source node ${K} to all other nodes is `,networkDelayTime(times, N, K));";s:5:"stdin";s:0:"";s:8:"expected";s:58:"Time taken from the source node 2 to all other nodes is  2";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"1";s:7:"display";s:4:"SHOW";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}i:1;O:8:"stdClass":11:{s:2:"id";s:4:"1185";s:10:"questionid";s:4:"1952";s:8:"testtype";s:1:"0";s:8:"testcode";s:212:"const times = [[2, 1, 3], 
               [2, 3, 1], 
               [3, 1, 2]];
const N = 4;
const K = 2;
console.log(`Time taken from the source node ${K} to all other nodes is `,networkDelayTime(times, N, K));";s:5:"stdin";s:0:"";s:8:"expected";s:59:"Time taken from the source node 2 to all other nodes is  -1";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"0";s:7:"display";s:4:"SHOW";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}i:2;O:8:"stdClass":11:{s:2:"id";s:4:"1186";s:10:"questionid";s:4:"1952";s:8:"testtype";s:1:"0";s:8:"testcode";s:212:"const times = [[2, 1, 3], 
               [2, 3, 1], 
               [3, 4, 2]];
const N = 4;
const K = 2;
console.log(`Time taken from the source node ${K} to all other nodes is `,networkDelayTime(times, N, K));";s:5:"stdin";s:0:"";s:8:"expected";s:58:"Time taken from the source node 2 to all other nodes is  3";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"0";s:7:"display";s:4:"SHOW";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}i:3;O:8:"stdClass":11:{s:2:"id";s:4:"1187";s:10:"questionid";s:4:"1952";s:8:"testtype";s:1:"0";s:8:"testcode";s:192:"const times = [[1, 3, 4],
[2, 4, 2],
[3, 5, 3],
[4, 5, 1]
];
const N = 5;
const K = 1;
console.log(`Time taken from the source node ${K} to all other nodes is `,networkDelayTime(times, N, K));";s:5:"stdin";s:0:"";s:8:"expected";s:59:"Time taken from the source node 1 to all other nodes is  -1";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"0";s:7:"display";s:4:"HIDE";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}i:4;O:8:"stdClass":11:{s:2:"id";s:4:"1188";s:10:"questionid";s:4:"1952";s:8:"testtype";s:1:"0";s:8:"testcode";s:192:"const times = [[1, 2, 5],
[2, 3, 2],
[3, 4, 1],
[4, 5, 3]
];
const N = 5;
const K = 1;
console.log(`Time taken from the source node ${K} to all other nodes is `,networkDelayTime(times, N, K));";s:5:"stdin";s:0:"";s:8:"expected";s:59:"Time taken from the source node 1 to all other nodes is  11";s:5:"extra";s:0:"";s:12:"useasexample";s:1:"0";s:7:"display";s:4:"HIDE";s:14:"hiderestiffail";s:1:"0";s:4:"mark";s:5:"1.000";}}}s:5:"hints";a:0:{}s:9:"prototype";O:25:"qtype_coderunner_question":86:{s:2:"id";s:4:"2785";s:8:"category";s:1:"2";s:9:"contextid";s:1:"1";s:6:"parent";s:1:"0";s:5:"qtype";O:16:"qtype_coderunner":1:{s:14:" * fileoptions";a:3:{s:7:"subdirs";b:1;s:8:"maxfiles";i:-1;s:8:"maxbytes";i:0;}}s:4:"name";s:24:"BUILTIN_PROTOTYPE_nodejs";s:12:"questiontext";s:536:"<p>A JavaScript question type, run using nodejs. The
test program to be executed starts with the student answer. That is followed
by each of the test case codes in turn, with a separator string being printed
between them. However, if there is any standard input present for any of the
test cases, a separate test run will be done for each test case.</p><p>
If there is a risk of side-effects from a test case affecting later test cases
you can add standard input to any one of the test cases to force the one-run-per-test-case
mode.</p>";s:18:"questiontextformat";s:1:"1";s:15:"generalfeedback";s:0:"";s:21:"generalfeedbackformat";s:1:"1";s:11:"defaultmark";d:1;s:6:"length";s:1:"1";s:7:"penalty";d:0;s:5:"stamp";s:37:"lms.velandev.life+250922115904+0z8ofh";s:8:"idnumber";N;s:11:"timecreated";s:10:"1758542344";s:12:"timemodified";s:10:"1758542344";s:9:"createdby";s:1:"2";s:10:"modifiedby";s:1:"2";s:5:"hints";a:0:{}s:6:"status";s:5:"ready";s:9:"versionid";s:4:"2785";s:7:"version";s:1:"1";s:19:"questionbankentryid";s:4:"2771";s:16:" * latestversion";N;s:12:"customfields";a:0:{}s:14:"shownumcorrect";b:0;s:9:"testcases";a:0:{}s:14:"coderunnertype";s:6:"nodejs";s:13:"prototypetype";s:1:"1";s:12:"allornothing";s:1:"1";s:13:"penaltyregime";s:15:"33.3, 66.7, ...";s:8:"precheck";s:1:"0";s:9:"hidecheck";s:1:"0";s:10:"showsource";s:1:"0";s:14:"answerboxlines";s:2:"18";s:13:"answerpreload";s:0:"";s:11:"globalextra";s:0:"";s:6:"useace";s:1:"1";s:13:"resultcolumns";N;s:8:"template";s:179:"{{ STUDENT_ANSWER }}

var SEPARATOR = "#<ab@17943918#@>#";

{% for TEST in TESTCASES %}
{{ TEST.testcode }}
{% if not loop.last %}
console.log(SEPARATOR);
{% endif %}
{% endfor %}";s:20:"iscombinatortemplate";s:1:"1";s:19:"allowmultiplestdins";s:1:"0";s:6:"answer";s:0:"";s:14:"validateonsave";s:1:"0";s:14:"testsplitterre";s:23:"|#<ab@17943918#@>#\n|ms";s:8:"language";s:6:"nodejs";s:7:"acelang";N;s:7:"sandbox";N;s:6:"grader";s:14:"EqualityGrader";s:16:"cputimelimitsecs";N;s:10:"memlimitmb";s:4:"1000";s:13:"sandboxparams";s:35:"{"sourcefilename": "__tester__.js"}";s:14:"templateparams";s:0:"";s:19:"hoisttemplateparams";s:1:"0";s:19:"extractcodefromjson";s:1:"1";s:18:"templateparamslang";s:4:"twig";s:24:"templateparamsevalpertry";s:1:"0";s:19:"templateparamsevald";s:0:"";s:7:"twigall";s:1:"0";s:8:"uiplugin";s:3:"ace";s:12:"uiparameters";s:0:"";s:11:"attachments";s:1:"0";s:19:"attachmentsrequired";s:1:"0";s:11:"maxfilesize";s:1:"0";s:14:"filenamesregex";s:0:"";s:16:"filenamesexplain";s:0:"";s:15:"displayfeedback";s:1:"0";s:13:"giveupallowed";s:1:"0";s:14:"prototypeextra";N;s:7:"answers";a:0:{}s:9:"customise";b:1;s:7:"student";N;s:9:"prototype";N;s:26:"initialisationerrormessage";N;s:16:"cachedfuncparams";N;s:25:"cachedevaldtemplateparams";N;s:18:"mergeduiparameters";N;s:18:"templateparamsjson";N;s:10:"parameters";N;s:8:"stepinfo";N;s:7:"options";N;s:5:"isnew";N;s:7:"context";N;s:10:"questionid";N;s:16:"answerboxcolumns";s:3:"100";}}